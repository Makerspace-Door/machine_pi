#!/usr/bin/python3
#
# Mifare Desfire NFC Python Module
# Copyright (C) 2019  Christian Carlowitz <chca@cmesh.de>
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

""" mdnfc_tool

Usage:
    mdnfc_tool (-l|--list)
    mdnfc_tool (-f|--format)
    mdnfc_tool (-c|--create) <appid>
    mdnfc_tool --keyinit
    mdnfc_tool --test1
    mdnfc_tool --test2

Options:
    -l --list       List tags and contents
    -f --format     Format tag PICC
    -c --create     Create Application
    --keyinit       Initially configure secure key
    --test1         Test 1
    --test2         Test 2
"""

import sys
import mdnfc
import time
import json

from docopt import docopt

class AnyTag:
    def __enter__(self):
        tags = mdnfc.list_tags()
        first = True
        for t in tags:
            print("tag", t["type"],  t["uid"], "*" if first else "")
            first = False
        if len(tags) < 1:
            raise Exception("no tag found")
        self.tag = tags[0]
        self.uid = self.tag["uid"]
        mdnfc.connect(self.uid)
    def __exit__(self, type, value, traceback):
        mdnfc.disconnect(self.uid)

class Auth:
    def __init__(self, keyid, key):
        self.keyid = keyid
        self.key = bytes.fromhex(key)
    def __enter__(self):
        if len(self.key) == 8:
            mdnfc.auth_insecure(self.keyid, self.key)
        elif len(self.key) == 16:
            mdnfc.auth_secure(self.keyid, self.key)
        else:
            raise Exception("invalid key length")
    def __exit__(self, type, value, traceback):
        pass

class App:
    def __init__(self, aid):
        self.aid = aid
    def __enter__(self):
        mdnfc.app_select(self.aid)
    def __exit__(self, type, value, traceback):
        pass

def keyConf(editConf=True, noAuthCreate=False, noAuthList=False, editKey=True):
    return ((1<<3) if editConf else 0) | \
        ((1<<2) if noAuthCreate else 0) | \
        ((1<<1) if noAuthList else 0) | \
        ((1<<0) if editKey else 0)

def changeKey(keyid, oldkey, newkey):
    oldkey = bytes.fromhex(oldkey)
    newkey = bytes.fromhex(newkey)
    mdnfc.change_key(keyid, oldkey, newkey)   

if __name__ == '__main__':

    args = docopt(__doc__)

    with open("config.json") as f:
        cfg = json.load(f)

    mdnfc.init()

    if args["--list"]:
        with AnyTag(), Auth(0, cfg["key_picc"]):
            # query apps
            aids = mdnfc.get_appids()
            print(" apps: " + " ".join([str(aid) for aid in aids]))
            # query key
            s,n = mdnfc.get_keysettings()
            print(" keysettings:", s, n)

    elif args["--format"]:
        with AnyTag(), Auth(0, cfg["key_picc"]):
            mdnfc.format()

    elif args["--keyinit"]:
        with AnyTag():
            for i in range(0,len(cfg["key_default"])):
                key = cfg["key_default"][i]
                try:
                    print("trying key", i, end=" ")
                    with App(0), Auth(0, key):
                        print("success, keychange", end=" ")
                        mdnfc.set_keysettings(keyConf())
                        changeKey(0, key, cfg["key_picc"])
                        print("ok")
                        break
                except Exception as e:
                    print("failed,", str(e))

    elif args["--create"]:
        aid = int(args["<appid>"])
        with AnyTag(), App(0), Auth(0, cfg["key_picc"]):
            mdnfc.app_create(aid, keyConf(), 4)
            with App(aid), Auth(0, "00"*16):
                    mdnfc.set_keysettings(keyConf())
                    changeKey(1, "00"*16, cfg["key_app_read"])
                    changeKey(2, "00"*16, cfg["key_app_write"])
                    changeKey(3, "00"*16, cfg["key_app_readwrite"])
                    changeKey(0, "00"*16, cfg["key_app_master"])

    elif args["--test1"]:
        with AnyTag(), App(0), Auth(0, cfg["key_picc"]):
            pass

    elif args["--test2"]:
        with AnyTag(), App(42), Auth(0, cfg["key_app_master"]):
            pass

    mdnfc.deinit()

